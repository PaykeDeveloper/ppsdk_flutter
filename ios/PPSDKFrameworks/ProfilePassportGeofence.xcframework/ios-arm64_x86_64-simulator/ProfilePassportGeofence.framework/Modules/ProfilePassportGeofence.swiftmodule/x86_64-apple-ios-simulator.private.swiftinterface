// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ProfilePassportGeofence
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import CoreLocation
import Foundation
import ProfilePassportCore
@_exported import ProfilePassportGeofence
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers @objc public class PP3GGeoS3FilePathDBEntity : ObjectiveC.NSObject {
  public var id: Swift.Int64?
  public var created: Swift.String
  public var geoS3FilePath: Swift.String
  public var lastUpdateTime: Swift.String
  public var updateFlag: Swift.Bool
  @objc deinit
}
public enum PP3GGeoDBStateEvent : Swift.String {
  case UNKNOWN
  case IN
  case OUT
  case REGISTER
  case REMOVE
  case INSIDE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class PP3GGeoDataAndS3FileDBEntity : ObjectiveC.NSObject {
  public var id: Swift.Int64?
  public var created: Swift.String
  public var geoS3FilePathID: Swift.Int64
  public var geoID: Swift.Int64
  @objc deinit
}
public protocol PP3GGeoStateAccessorIF {
  func getGeoState() -> Swift.Bool
}
public struct PP3GGeoAreaBoundary {
}
public protocol PP3GGeoContextIF : ProfilePassportCore.PP3CLibraryContextIF {
  var geoDBAccessor: (any ProfilePassportGeofence.PP3GGeoDBAccessorIF)! { get set }
  var geoStateAccessor: (any ProfilePassportGeofence.PP3GGeoStateAccessorIF)! { get set }
  var geoLogGenerator: (any ProfilePassportGeofence.PP3GGeoLogGeneratorIF)! { get set }
  var geoResourceManager: (any ProfilePassportGeofence.PP3GGeoResourceManagerIF)! { get set }
  var geoDetectManager: (any ProfilePassportGeofence.PP3GGeoDetectManagerIF)! { get set }
  var geoThread: Dispatch.DispatchQueue! { get set }
}
@_hasMissingDesignatedInitializers @objc public class PP3GGeoTagDataAndNoticeDataDBEntity : ObjectiveC.NSObject {
  public var id: Swift.Int64?
  public var created: Swift.String
  public var geoTagId: Swift.Int64
  public var noticeId: Swift.Int64
  public var event: Swift.String
  public var insidePushId: Swift.Int64?
  @objc deinit
}
public protocol PP3GGeoDBAccessorIF {
  func registerGeoDBData(geoListData: Foundation.Data, geoS3FilePath: Swift.String, lastUpdateTime: Swift.String) -> Swift.Bool
  func getGeoS3FilePathDataList(notIncludeStart: Swift.String?, limit: Swift.Int) -> [ProfilePassportGeofence.PP3GGeoS3FilePathDBEntity]
  func getGeoDataListByMeshList(meshList: [Swift.String], notIncludeStart: Swift.Int?, limit: Swift.Int?) -> [ProfilePassportGeofence.PP3GGeoDataDBEntity]?
  func getGeoDataListByInsidePushId(insidePushId: Swift.Int) -> [ProfilePassportGeofence.PP3GGeoDataDBEntity]
  func deleteGeoDBDataByGeoS3FilePath(geoS3FilePath: Swift.String) -> Swift.Bool
  func registerGeoStateData(geoStateData: ProfilePassportGeofence.PP3GGeoStateDBEntity) -> Swift.Int64
  func getGeoStateDataListByGeoIDList(geoIDList: [Swift.Int64]) -> [ProfilePassportGeofence.PP3GGeoStateDBEntity]
  func getGeoStateListByGeoTagId(geoTagId: Swift.Int64) -> [ProfilePassportGeofence.PP3GGeoStateDBEntity]
  func getGeoTagDataListByGeoTagId(geoTagId: Swift.Int) -> ProfilePassportGeofence.PP3GGeoTagDataDBEntity?
  func getGeoTagDataAndNoticeDataListByGeoTagId(geoTagId: Swift.Int) -> [ProfilePassportGeofence.PP3GGeoTagDataAndNoticeDataDBEntity]?
  func getInGeoAreaDataList(meshList: [Swift.String], boundary: ProfilePassportGeofence.PP3GGeoAreaBoundary) -> [ProfilePassportGeofence.PP3GGeoDataDBEntity]
  func getOutGeoAreaDataList(boundary: ProfilePassportGeofence.PP3GGeoAreaBoundary) -> [ProfilePassportGeofence.PP3GGeoDataDBEntity]
  func getNearGeoAreaDataList(meshList: [Swift.String], boundary: ProfilePassportGeofence.PP3GGeoAreaBoundary) -> [ProfilePassportGeofence.PP3GGeoDataDBEntity]
  func getGeoDataByGeoId(geoId: Swift.Int64) -> ProfilePassportGeofence.PP3GGeoDataDBEntity?
  func deleteGeoStateDataByGeoIDList(geoIDList: [Swift.Int64]) -> Swift.Bool
  func deleteGeoStateDataBeforeTime(time: Swift.String) -> Swift.Bool
  func deleteGeoStateDataUnnecessaryOutState(time: Swift.String) -> Swift.Bool
  func registerOrUpdateGeoS3FilePath(entity: ProfilePassportGeofence.PP3GGeoS3FilePathDBEntity) -> Swift.Bool
  func getS3FilePathListByMeshList(meshList: [Swift.String], updateFlag: Swift.Bool) -> [ProfilePassportGeofence.PP3GGeoS3FilePathDBEntity]?
  func getGeoDataListByGeoIDList(geoIDList: [Swift.Int]) -> [ProfilePassportGeofence.PP3GGeoDataDBEntity]?
  func countGeoDBData(tableName: Swift.String) -> Swift.Int
  func getGeoDataList() -> [ProfilePassportGeofence.PP3GGeoDataDBEntity]
  func getGeoTagData() -> [ProfilePassportGeofence.PP3GGeoTagDataDBEntity]
  func getGeoStateDataList() -> [ProfilePassportGeofence.PP3GGeoStateDBEntity]
}
public protocol PP3GGeoResourceManagerIF {
  func setup()
  func updateState(sdkThread: ProfilePassportCore.PP3CSDKQueue)
  func addGeoResourceCompleteCallback(callBackId: Swift.String, geoResourceCompleteCallback: @escaping () -> Swift.Bool)
}
@_hasMissingDesignatedInitializers @objc public class PP3GGeoTagDataAndGeoDataDBEntity : ObjectiveC.NSObject {
  public var id: Swift.Int64?
  public var created: Swift.String
  public var geoTagId: Swift.Int64
  public var geoID: Swift.Int64
  @objc deinit
}
public protocol PP3GGeoDetectManagerIF {
  func setup()
  func updateState(sdkThread: ProfilePassportCore.PP3CSDKQueue)
  func updateGeo(location: CoreLocation.CLLocation?, opportunity: Swift.String)
  func detectGeo(geoDataList: [ProfilePassportGeofence.PP3GGeoDataDBEntity], event: ProfilePassportGeofence.PP3GGeoDBStateEvent, insidePushId: Swift.Int?, triggerDate: Foundation.Date)
  func addLocationUpdateCallback(callBackId: Swift.String, geoConfigCallback: @escaping (_ newLocation: CoreLocation.CLLocation) -> Swift.Bool?)
}
@objc public class PP3GGeoStateDBEntity : ObjectiveC.NSObject {
  public var created: Swift.String?
  public var geoID: Swift.Int64?
  public var geoState: Swift.String?
  public var geoAtTime: Swift.String?
  public var geoLeftTime: Swift.String?
  public var geoInsideTime: Swift.String?
  public var geoRegistTime: Swift.String?
  public var geoRemoveTime: Swift.String?
  public init(created: Swift.String?, geoID: Swift.Int64, geoState: Swift.String?, geoAtTime: Swift.String?, geoLeftTime: Swift.String?, geoInsideTime: Swift.String?, geoRegistTime: Swift.String?, geoRemoveTime: Swift.String?)
  @objc deinit
}
@objc public protocol PPGEODelegate : ProfilePassportCore.PPSDKDelegate {
  @objc optional func onGeoEvent(geoInfo: ProfilePassportGeofence.PPGEOResult) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objc public class PP3GGeoDataDBEntity : ObjectiveC.NSObject {
  public var created: Swift.String
  public var geoID: Swift.Int64
  public var geoData: Swift.String
  public var geoState: Swift.String?
  public var minLat: Swift.Double
  public var minLon: Swift.Double
  public var maxLat: Swift.Double
  public var maxLon: Swift.Double
  @objc deinit
}
public protocol PP3GGeoLogGeneratorIF {
  func updateState(sdkThread: ProfilePassportCore.PP3CSDKQueue)
  func generateGeoLog(geoDetectResult: ProfilePassportGeofence.PPGEOResult, getDetectTagResult: ProfilePassportGeofence.PPGEOTagResult, eventGeoDBState: ProfilePassportGeofence.PP3GGeoStateDBEntity, continueFlag: Swift.Bool, geoTagDwell: (Swift.Double, Swift.Double))
}
@_inheritsConvenienceInitializers @objc public class PPGEOResult : ObjectiveC.NSObject {
  @objc public var geoId: Swift.Int
  @objc public var geoName: Swift.String
  @objc public var geoEvent: ProfilePassportGeofence.PPGEOEvent
  @objc public var geoDwellTime: Swift.Int64
  @objc public var geoAtTime: Foundation.Date?
  @objc public var geoLastUpdateTime: Foundation.Date?
  @objc public var geoKind: ProfilePassportGeofence.PPGEOKind
  @objc public var centerCoordinate: CoreLocation.CLLocationCoordinate2D
  @objc public var geoRadius: Swift.Double
  @objc public var apexCoordinates: [CoreLocation.CLLocationCoordinate2D]
  @objc public var geoTags: [ProfilePassportGeofence.PPGEOTagResult]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class PPGEOTagResult : ObjectiveC.NSObject {
  @objc public var geoTagId: Swift.Int
  @objc public var geoTagName: Swift.String
  @objc public var geoTagEvent: ProfilePassportGeofence.PPGEOEvent
  @objc public var geoTagDwellTime: Swift.Int64
  @objc public var geoTagAtTime: Foundation.Date?
  @objc public var geoTagLastUpdateTime: Foundation.Date?
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum PPGEOEvent : Swift.Int {
  case NONE = 0
  case AT
  case LEFT
  case INSIDE
  case REMOVE
  public typealias RawValue = Swift.String
  public var rawValue: ProfilePassportGeofence.PPGEOEvent.RawValue {
    get
  }
  public init?(rawValue: ProfilePassportGeofence.PPGEOEvent.RawValue)
}
@objc public enum PPGEOKind : Swift.Int {
  case UNKNOWN = 0
  case POLYGON
  case CIRCLE
  public typealias RawValue = Swift.String
  public var rawValue: ProfilePassportGeofence.PPGEOKind.RawValue {
    get
  }
  public init?(rawValue: ProfilePassportGeofence.PPGEOKind.RawValue)
}
@_hasMissingDesignatedInitializers @objc public class PP3GGeoTagDataDBEntity : ObjectiveC.NSObject {
  public var created: Swift.String
  public var geoTagId: Swift.Int64
  public var geoTagName: Swift.String
  @objc deinit
}
extension ProfilePassportGeofence.PP3GGeoDBStateEvent : Swift.Equatable {}
extension ProfilePassportGeofence.PP3GGeoDBStateEvent : Swift.Hashable {}
extension ProfilePassportGeofence.PP3GGeoDBStateEvent : Swift.RawRepresentable {}
extension ProfilePassportGeofence.PPGEOEvent : Swift.Equatable {}
extension ProfilePassportGeofence.PPGEOEvent : Swift.Hashable {}
extension ProfilePassportGeofence.PPGEOEvent : Swift.RawRepresentable {}
extension ProfilePassportGeofence.PPGEOKind : Swift.Equatable {}
extension ProfilePassportGeofence.PPGEOKind : Swift.Hashable {}
extension ProfilePassportGeofence.PPGEOKind : Swift.RawRepresentable {}
